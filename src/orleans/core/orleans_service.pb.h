// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orleans_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orleans_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_orleans_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gayrpc/core/gayrpc_option.pb.h"
#include "gayrpc/core/gayrpc_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_orleans_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orleans_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_orleans_5fservice_2eproto;
namespace orleans {
namespace core {
class OrleansReleaseRequest;
class OrleansReleaseRequestDefaultTypeInternal;
extern OrleansReleaseRequestDefaultTypeInternal _OrleansReleaseRequest_default_instance_;
class OrleansReleaseResponse;
class OrleansReleaseResponseDefaultTypeInternal;
extern OrleansReleaseResponseDefaultTypeInternal _OrleansReleaseResponse_default_instance_;
class OrleansRequest;
class OrleansRequestDefaultTypeInternal;
extern OrleansRequestDefaultTypeInternal _OrleansRequest_default_instance_;
class OrleansResponse;
class OrleansResponseDefaultTypeInternal;
extern OrleansResponseDefaultTypeInternal _OrleansResponse_default_instance_;
}  // namespace core
}  // namespace orleans
PROTOBUF_NAMESPACE_OPEN
template<> ::orleans::core::OrleansReleaseRequest* Arena::CreateMaybeMessage<::orleans::core::OrleansReleaseRequest>(Arena*);
template<> ::orleans::core::OrleansReleaseResponse* Arena::CreateMaybeMessage<::orleans::core::OrleansReleaseResponse>(Arena*);
template<> ::orleans::core::OrleansRequest* Arena::CreateMaybeMessage<::orleans::core::OrleansRequest>(Arena*);
template<> ::orleans::core::OrleansResponse* Arena::CreateMaybeMessage<::orleans::core::OrleansResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orleans {
namespace core {

// ===================================================================

class OrleansRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orleans.core.OrleansRequest) */ {
 public:
  OrleansRequest();
  virtual ~OrleansRequest();

  OrleansRequest(const OrleansRequest& from);
  OrleansRequest(OrleansRequest&& from) noexcept
    : OrleansRequest() {
    *this = ::std::move(from);
  }

  inline OrleansRequest& operator=(const OrleansRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrleansRequest& operator=(OrleansRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrleansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrleansRequest* internal_default_instance() {
    return reinterpret_cast<const OrleansRequest*>(
               &_OrleansRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrleansRequest& a, OrleansRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrleansRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrleansRequest* New() const final {
    return CreateMaybeMessage<OrleansRequest>(nullptr);
  }

  OrleansRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrleansRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrleansRequest& from);
  void MergeFrom(const OrleansRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrleansRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orleans.core.OrleansRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_orleans_5fservice_2eproto);
    return ::descriptor_table_orleans_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrainTypeFieldNumber = 1,
    kGrainUniqueNameFieldNumber = 2,
    kBodyFieldNumber = 4,
    kMetaFieldNumber = 3,
  };
  // string grain_type = 1;
  void clear_grain_type();
  const std::string& grain_type() const;
  void set_grain_type(const std::string& value);
  void set_grain_type(std::string&& value);
  void set_grain_type(const char* value);
  void set_grain_type(const char* value, size_t size);
  std::string* mutable_grain_type();
  std::string* release_grain_type();
  void set_allocated_grain_type(std::string* grain_type);

  // string grain_unique_name = 2;
  void clear_grain_unique_name();
  const std::string& grain_unique_name() const;
  void set_grain_unique_name(const std::string& value);
  void set_grain_unique_name(std::string&& value);
  void set_grain_unique_name(const char* value);
  void set_grain_unique_name(const char* value, size_t size);
  std::string* mutable_grain_unique_name();
  std::string* release_grain_unique_name();
  void set_allocated_grain_unique_name(std::string* grain_unique_name);

  // bytes body = 4;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // .gayrpc.core.RpcMeta meta = 3;
  bool has_meta() const;
  void clear_meta();
  const ::gayrpc::core::RpcMeta& meta() const;
  ::gayrpc::core::RpcMeta* release_meta();
  ::gayrpc::core::RpcMeta* mutable_meta();
  void set_allocated_meta(::gayrpc::core::RpcMeta* meta);

  // @@protoc_insertion_point(class_scope:orleans.core.OrleansRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grain_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grain_unique_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::gayrpc::core::RpcMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orleans_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrleansResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orleans.core.OrleansResponse) */ {
 public:
  OrleansResponse();
  virtual ~OrleansResponse();

  OrleansResponse(const OrleansResponse& from);
  OrleansResponse(OrleansResponse&& from) noexcept
    : OrleansResponse() {
    *this = ::std::move(from);
  }

  inline OrleansResponse& operator=(const OrleansResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrleansResponse& operator=(OrleansResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrleansResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrleansResponse* internal_default_instance() {
    return reinterpret_cast<const OrleansResponse*>(
               &_OrleansResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrleansResponse& a, OrleansResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrleansResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrleansResponse* New() const final {
    return CreateMaybeMessage<OrleansResponse>(nullptr);
  }

  OrleansResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrleansResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrleansResponse& from);
  void MergeFrom(const OrleansResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrleansResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orleans.core.OrleansResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_orleans_5fservice_2eproto);
    return ::descriptor_table_orleans_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // .gayrpc.core.RpcMeta meta = 1;
  bool has_meta() const;
  void clear_meta();
  const ::gayrpc::core::RpcMeta& meta() const;
  ::gayrpc::core::RpcMeta* release_meta();
  ::gayrpc::core::RpcMeta* mutable_meta();
  void set_allocated_meta(::gayrpc::core::RpcMeta* meta);

  // @@protoc_insertion_point(class_scope:orleans.core.OrleansResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::gayrpc::core::RpcMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orleans_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrleansReleaseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orleans.core.OrleansReleaseRequest) */ {
 public:
  OrleansReleaseRequest();
  virtual ~OrleansReleaseRequest();

  OrleansReleaseRequest(const OrleansReleaseRequest& from);
  OrleansReleaseRequest(OrleansReleaseRequest&& from) noexcept
    : OrleansReleaseRequest() {
    *this = ::std::move(from);
  }

  inline OrleansReleaseRequest& operator=(const OrleansReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrleansReleaseRequest& operator=(OrleansReleaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrleansReleaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrleansReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const OrleansReleaseRequest*>(
               &_OrleansReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrleansReleaseRequest& a, OrleansReleaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrleansReleaseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrleansReleaseRequest* New() const final {
    return CreateMaybeMessage<OrleansReleaseRequest>(nullptr);
  }

  OrleansReleaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrleansReleaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrleansReleaseRequest& from);
  void MergeFrom(const OrleansReleaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrleansReleaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orleans.core.OrleansReleaseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_orleans_5fservice_2eproto);
    return ::descriptor_table_orleans_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrainTypeFieldNumber = 1,
    kGrainUniqueNameFieldNumber = 2,
  };
  // string grain_type = 1;
  void clear_grain_type();
  const std::string& grain_type() const;
  void set_grain_type(const std::string& value);
  void set_grain_type(std::string&& value);
  void set_grain_type(const char* value);
  void set_grain_type(const char* value, size_t size);
  std::string* mutable_grain_type();
  std::string* release_grain_type();
  void set_allocated_grain_type(std::string* grain_type);

  // string grain_unique_name = 2;
  void clear_grain_unique_name();
  const std::string& grain_unique_name() const;
  void set_grain_unique_name(const std::string& value);
  void set_grain_unique_name(std::string&& value);
  void set_grain_unique_name(const char* value);
  void set_grain_unique_name(const char* value, size_t size);
  std::string* mutable_grain_unique_name();
  std::string* release_grain_unique_name();
  void set_allocated_grain_unique_name(std::string* grain_unique_name);

  // @@protoc_insertion_point(class_scope:orleans.core.OrleansReleaseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grain_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grain_unique_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orleans_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrleansReleaseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orleans.core.OrleansReleaseResponse) */ {
 public:
  OrleansReleaseResponse();
  virtual ~OrleansReleaseResponse();

  OrleansReleaseResponse(const OrleansReleaseResponse& from);
  OrleansReleaseResponse(OrleansReleaseResponse&& from) noexcept
    : OrleansReleaseResponse() {
    *this = ::std::move(from);
  }

  inline OrleansReleaseResponse& operator=(const OrleansReleaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrleansReleaseResponse& operator=(OrleansReleaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrleansReleaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrleansReleaseResponse* internal_default_instance() {
    return reinterpret_cast<const OrleansReleaseResponse*>(
               &_OrleansReleaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrleansReleaseResponse& a, OrleansReleaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrleansReleaseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrleansReleaseResponse* New() const final {
    return CreateMaybeMessage<OrleansReleaseResponse>(nullptr);
  }

  OrleansReleaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrleansReleaseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrleansReleaseResponse& from);
  void MergeFrom(const OrleansReleaseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrleansReleaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orleans.core.OrleansReleaseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_orleans_5fservice_2eproto);
    return ::descriptor_table_orleans_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:orleans.core.OrleansReleaseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orleans_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrleansRequest

// string grain_type = 1;
inline void OrleansRequest::clear_grain_type() {
  grain_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrleansRequest::grain_type() const {
  // @@protoc_insertion_point(field_get:orleans.core.OrleansRequest.grain_type)
  return grain_type_.GetNoArena();
}
inline void OrleansRequest::set_grain_type(const std::string& value) {
  
  grain_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orleans.core.OrleansRequest.grain_type)
}
inline void OrleansRequest::set_grain_type(std::string&& value) {
  
  grain_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orleans.core.OrleansRequest.grain_type)
}
inline void OrleansRequest::set_grain_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grain_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orleans.core.OrleansRequest.grain_type)
}
inline void OrleansRequest::set_grain_type(const char* value, size_t size) {
  
  grain_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orleans.core.OrleansRequest.grain_type)
}
inline std::string* OrleansRequest::mutable_grain_type() {
  
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansRequest.grain_type)
  return grain_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrleansRequest::release_grain_type() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansRequest.grain_type)
  
  return grain_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrleansRequest::set_allocated_grain_type(std::string* grain_type) {
  if (grain_type != nullptr) {
    
  } else {
    
  }
  grain_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grain_type);
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansRequest.grain_type)
}

// string grain_unique_name = 2;
inline void OrleansRequest::clear_grain_unique_name() {
  grain_unique_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrleansRequest::grain_unique_name() const {
  // @@protoc_insertion_point(field_get:orleans.core.OrleansRequest.grain_unique_name)
  return grain_unique_name_.GetNoArena();
}
inline void OrleansRequest::set_grain_unique_name(const std::string& value) {
  
  grain_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orleans.core.OrleansRequest.grain_unique_name)
}
inline void OrleansRequest::set_grain_unique_name(std::string&& value) {
  
  grain_unique_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orleans.core.OrleansRequest.grain_unique_name)
}
inline void OrleansRequest::set_grain_unique_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grain_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orleans.core.OrleansRequest.grain_unique_name)
}
inline void OrleansRequest::set_grain_unique_name(const char* value, size_t size) {
  
  grain_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orleans.core.OrleansRequest.grain_unique_name)
}
inline std::string* OrleansRequest::mutable_grain_unique_name() {
  
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansRequest.grain_unique_name)
  return grain_unique_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrleansRequest::release_grain_unique_name() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansRequest.grain_unique_name)
  
  return grain_unique_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrleansRequest::set_allocated_grain_unique_name(std::string* grain_unique_name) {
  if (grain_unique_name != nullptr) {
    
  } else {
    
  }
  grain_unique_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grain_unique_name);
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansRequest.grain_unique_name)
}

// .gayrpc.core.RpcMeta meta = 3;
inline bool OrleansRequest::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline const ::gayrpc::core::RpcMeta& OrleansRequest::meta() const {
  const ::gayrpc::core::RpcMeta* p = meta_;
  // @@protoc_insertion_point(field_get:orleans.core.OrleansRequest.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::gayrpc::core::RpcMeta*>(
      &::gayrpc::core::_RpcMeta_default_instance_);
}
inline ::gayrpc::core::RpcMeta* OrleansRequest::release_meta() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansRequest.meta)
  
  ::gayrpc::core::RpcMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::gayrpc::core::RpcMeta* OrleansRequest::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::gayrpc::core::RpcMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansRequest.meta)
  return meta_;
}
inline void OrleansRequest::set_allocated_meta(::gayrpc::core::RpcMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansRequest.meta)
}

// bytes body = 4;
inline void OrleansRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrleansRequest::body() const {
  // @@protoc_insertion_point(field_get:orleans.core.OrleansRequest.body)
  return body_.GetNoArena();
}
inline void OrleansRequest::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orleans.core.OrleansRequest.body)
}
inline void OrleansRequest::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orleans.core.OrleansRequest.body)
}
inline void OrleansRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orleans.core.OrleansRequest.body)
}
inline void OrleansRequest::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orleans.core.OrleansRequest.body)
}
inline std::string* OrleansRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansRequest.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrleansRequest::release_body() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansRequest.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrleansRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansRequest.body)
}

// -------------------------------------------------------------------

// OrleansResponse

// .gayrpc.core.RpcMeta meta = 1;
inline bool OrleansResponse::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline const ::gayrpc::core::RpcMeta& OrleansResponse::meta() const {
  const ::gayrpc::core::RpcMeta* p = meta_;
  // @@protoc_insertion_point(field_get:orleans.core.OrleansResponse.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::gayrpc::core::RpcMeta*>(
      &::gayrpc::core::_RpcMeta_default_instance_);
}
inline ::gayrpc::core::RpcMeta* OrleansResponse::release_meta() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansResponse.meta)
  
  ::gayrpc::core::RpcMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::gayrpc::core::RpcMeta* OrleansResponse::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::gayrpc::core::RpcMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansResponse.meta)
  return meta_;
}
inline void OrleansResponse::set_allocated_meta(::gayrpc::core::RpcMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansResponse.meta)
}

// bytes body = 2;
inline void OrleansResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrleansResponse::body() const {
  // @@protoc_insertion_point(field_get:orleans.core.OrleansResponse.body)
  return body_.GetNoArena();
}
inline void OrleansResponse::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orleans.core.OrleansResponse.body)
}
inline void OrleansResponse::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orleans.core.OrleansResponse.body)
}
inline void OrleansResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orleans.core.OrleansResponse.body)
}
inline void OrleansResponse::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orleans.core.OrleansResponse.body)
}
inline std::string* OrleansResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansResponse.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrleansResponse::release_body() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansResponse.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrleansResponse::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansResponse.body)
}

// -------------------------------------------------------------------

// OrleansReleaseRequest

// string grain_type = 1;
inline void OrleansReleaseRequest::clear_grain_type() {
  grain_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrleansReleaseRequest::grain_type() const {
  // @@protoc_insertion_point(field_get:orleans.core.OrleansReleaseRequest.grain_type)
  return grain_type_.GetNoArena();
}
inline void OrleansReleaseRequest::set_grain_type(const std::string& value) {
  
  grain_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orleans.core.OrleansReleaseRequest.grain_type)
}
inline void OrleansReleaseRequest::set_grain_type(std::string&& value) {
  
  grain_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orleans.core.OrleansReleaseRequest.grain_type)
}
inline void OrleansReleaseRequest::set_grain_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grain_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orleans.core.OrleansReleaseRequest.grain_type)
}
inline void OrleansReleaseRequest::set_grain_type(const char* value, size_t size) {
  
  grain_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orleans.core.OrleansReleaseRequest.grain_type)
}
inline std::string* OrleansReleaseRequest::mutable_grain_type() {
  
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansReleaseRequest.grain_type)
  return grain_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrleansReleaseRequest::release_grain_type() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansReleaseRequest.grain_type)
  
  return grain_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrleansReleaseRequest::set_allocated_grain_type(std::string* grain_type) {
  if (grain_type != nullptr) {
    
  } else {
    
  }
  grain_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grain_type);
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansReleaseRequest.grain_type)
}

// string grain_unique_name = 2;
inline void OrleansReleaseRequest::clear_grain_unique_name() {
  grain_unique_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrleansReleaseRequest::grain_unique_name() const {
  // @@protoc_insertion_point(field_get:orleans.core.OrleansReleaseRequest.grain_unique_name)
  return grain_unique_name_.GetNoArena();
}
inline void OrleansReleaseRequest::set_grain_unique_name(const std::string& value) {
  
  grain_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orleans.core.OrleansReleaseRequest.grain_unique_name)
}
inline void OrleansReleaseRequest::set_grain_unique_name(std::string&& value) {
  
  grain_unique_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orleans.core.OrleansReleaseRequest.grain_unique_name)
}
inline void OrleansReleaseRequest::set_grain_unique_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grain_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orleans.core.OrleansReleaseRequest.grain_unique_name)
}
inline void OrleansReleaseRequest::set_grain_unique_name(const char* value, size_t size) {
  
  grain_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orleans.core.OrleansReleaseRequest.grain_unique_name)
}
inline std::string* OrleansReleaseRequest::mutable_grain_unique_name() {
  
  // @@protoc_insertion_point(field_mutable:orleans.core.OrleansReleaseRequest.grain_unique_name)
  return grain_unique_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrleansReleaseRequest::release_grain_unique_name() {
  // @@protoc_insertion_point(field_release:orleans.core.OrleansReleaseRequest.grain_unique_name)
  
  return grain_unique_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrleansReleaseRequest::set_allocated_grain_unique_name(std::string* grain_unique_name) {
  if (grain_unique_name != nullptr) {
    
  } else {
    
  }
  grain_unique_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grain_unique_name);
  // @@protoc_insertion_point(field_set_allocated:orleans.core.OrleansReleaseRequest.grain_unique_name)
}

// -------------------------------------------------------------------

// OrleansReleaseResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace orleans

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_orleans_5fservice_2eproto
